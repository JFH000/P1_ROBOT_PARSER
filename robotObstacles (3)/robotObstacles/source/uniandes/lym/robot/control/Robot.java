/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.*;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {
  private static Console sistema;

  public static void createSistema(Console s) {
    sistema = s;
  }

  private static RobotWorldDec world;

  void setWorld(RobotWorld w) {
        world = (RobotWorldDec) w;
  }

  String salida=new String();



  private static final String CREATE_VARS = "createVar";
  private static final String ASSIGN_VAR = "assignVar";
  private static final String GET_VAR = "getVar";
  private static final String GO_TO = "goTo";
  private static final String MOVE_I = "move";
  private static final String TURN_I = "turn";
  private static final String FACE_I = "face";
  private static final String PICK_I = "pick";
  private static final String PUT_I = "put";
  private static final String JUMP_I = "jump";
  private static final String NOP_I = "nop";

  private static final String FACING_C = "facing";
  private static final String CAN_PUT = "canPut";
  private static final String CAN_PICK = "canPick";
  private static final String CAN_MOVE = "canMove";
  private static final String CAN_JUMP = "canJump";
  private static final String NOT_ = "not";

  private static final String LOOP_C = "loop";
  private static final String CONDITIONAL_C = "conditional";
  private static final String REPEAT_C = "repeat";
  private static final String PROCEDURE_DEF = "procedureDef";
  private static final String PROCEDURE_CALL = "procedureCall";


  private static Integer blockID = 0;
  private static Integer instructionID = 0;

  private static Map<String, Object> globalVars = new HashMap<>();
  private static Map<String, Object> procs = new HashMap<>();
  private static Map<Integer,Map<String, Object>> blocks = new HashMap<>();

        public static Integer getInstructionID() {
        instructionID++;
        return instructionID;
    }

        public static void createVars(ArrayList<String> vars, Map<String, Object> map) throws Exception {
            for (String var : vars) {
                String valor;
                if (globalVars.containsKey(var) || map.containsKey(var)) {
                    try {
                      valor = map.get(var).toString();
                   }catch (Exception e) {
                  valor = "null";
               }
                    throw new IllegalArgumentException("La variable '" + var + "' ya fu\u00e9 creada, tiene el valor: " + valor);
                }
                map.put(var, null);
                sistema.printOutput("Variable creada: " + var);
                //System.out.println("Variable creada: " + var);
            }
        }

        public static void assignVar(String var, String value, Map<String, Object> map) throws Exception{
        if (!globalVars.containsKey(var) && !map.containsKey(var)) {
            throw new IllegalArgumentException("La variable '" + var + "' no existe.");
        }
        Map<String, Object> map_out;
        if (globalVars.containsKey(var)) {
            map_out = globalVars;
        }else{
            map_out = map;
        }

        if (globalVars.containsKey(value)) {
            map_out.put(var, getVar(value, globalVars));
        }else if (map.containsKey(value)) {
            map_out.put(var, map.get(value));
        } else {
            map_out.put(var, Integer.parseInt(value));
        }
            sistema.printOutput("Variable asignada: " + var + " con valor: " + map_out.get(var));
        //System.out.println("Variable asignada: " + var + " con valor: " + map_out.get(var));
      }

    public static Integer getVar(String var, Map<String, Object> map) throws Exception{
        if (!globalVars.containsKey(var) && !map.containsKey(var)) {
            throw new IllegalArgumentException("La variable '" + var + "' no existe.");
        }
        if (globalVars.containsKey(var)) {
            return (Integer) globalVars.get(var);
        }else {
            return (Integer) map.get(var);
        }
    }

//Empieza aqui yo de mas tarde ;´p

//    public static void createProc(String name, Map<String, Integer> localVars, ArrayList<Map<String, Object >> instructions) {
//        for (Map<String, Object> proc : procs) {
//            if (proc.containsKey(name)) {
//                throw new IllegalArgumentException("El procedimiento '" + name + "' ya fué creado.");
//            }
//        }
//        Map<String, Object> newProc = new HashMap<>();
//        newProc.put("name", name);
//        newProc.put("localVars", localVars);
//        newProc.put("instructions", instructions);
//        procs.add(newProc);
//    }

    public static Integer createBlock(Map<Integer, ArrayList<Object > > instructions) {
          blockID++;
          Map<String, Object> block = new HashMap<>();
          Map<String, Integer> localVars = new HashMap<>();
            block.put("id", blockID);
            block.put("localVars", localVars);
            block.put("instructions", instructions);
            blocks.put(blockID, block);
            sistema.printOutput("Bloque creado con id: " + blockID);
                        //System.out.println("Bloque creado con id: " + blockID);
          return blockID;
    }

    public static void executeBlock(Integer id) throws Exception{
        Map<String,Object> block = blocks.get(id);
        Map<String, Object> localVars = (Map<String, Object>) block.get("localVars");
        Map<Integer, ArrayList <Object >> instructions = (Map<Integer, ArrayList<Object >>) block.get("instructions");
        sistema.printOutput("Ejecutando bloque con id: " + id);
        //System.out.println("Ejecutando bloque con id: " + id);
        readInstructions(instructions, localVars);
    }

    public static Integer checkN(String n, Map<String, Object> map) {
        Integer n_value;
        if (globalVars.containsKey(n)) {
            n_value = (Integer) globalVars.get(n);
        }else if (map.containsKey(n)) {
            n_value = (Integer) map.get(n);
        }else {
            n_value = Integer.parseInt(n);
        }
        return n_value;
    }

    public static void caseGoTo(String n1, String n2, Map<String, Object> map) throws Exception{
        Integer n1_value;
        Integer n2_value;

        n1_value = checkN(n1, map);
        n2_value = checkN(n2, map);

                world.setPostion(n1_value, n2_value);

                sistema.printOutput("GOTO con valores: " + n1_value + " y " + n2_value);
        //System.out.println("GOTO con valores: " + n1_value + " y " + n2_value);

    }

    public static void caseMove(ArrayList<Object> out, Map<String, Object> map) throws Exception{
                Integer n;
                String operation;
                String value;
                n = checkN((String) out.get(1), map);
                ArrayList<Object> adds = (ArrayList<Object>) out.get(2);
                for (Object add : adds) {
                  if((String)add == "toThe") {
            operation = (String) add;
            value = (String) adds.get(1);
            //TODO
            sistema.printOutput("MOVE con valores: " + n + " y " + value + " y " + operation);
            //System.out.println("MOVE con valores: " + n + " y " + value + " y " + operation);
                  }else if((String)add == "inDir") {
            operation = (String) add;
            value = (String) adds.get(1);
            //TODO
            sistema.printOutput("MOVE con valores: " + n + " y " + value + " y " + operation);
            //System.out.println("MOVE con valores: " + n + " y " + value + " y " + operation);
          }else {
            operation = (String) add;
            //TODO
            sistema.printOutput("MOVE con valores: " + n + " y " + operation);
            //System.out.println("MOVE con valores: " + n + " y " + operation);
          }


    }
    //sistema.printOutput("MOVE con valor "+n);
        //System.out.println("MOVE con valor "+n);    

  }

  public static void caseTurn(String d, Map<String, Object> map) throws Exception{
        try {
          if (d.equals("#right")) {
        world.turnRight();
      }else if (d.equals("#left")) {
        world.turnRight();
        world.turnRight();
        world.turnRight();
      }else if (d.equals("#around")) {
        world.turnRight();
        world.turnRight();
      }
        }catch (Exception e) {
          throw new IllegalArgumentException("No se puede girar a la direcci\u00f3n " + d + ".");
        }
    sistema.printOutput("TURN con valor "+d);
    }

   public static void caseFace(String o, Map<String, Object> map) throws Exception{
     int faceMeta = -1;
     if (o.equals("#north")) {
       faceMeta = 0;
     }else if (o.equals("#south")) {
       faceMeta = 1;
     }else if (o.equals("#east")) {
       faceMeta = 2;
     }else if (o.equals("#west")) {
       faceMeta = 3;
     }else {
       throw new IllegalArgumentException("La direcci\u00f3n " + o + " no es v\u00e1lida.");
     }

//	public static final int NORTH = 0;
//	public static final int SOUTH = 1;
//	public static final int EAST = 2;
//	public static final int WEST = 3;

        while(true) {
          int actualFace = world.getFacing();
          if (actualFace == faceMeta) {
        break; }

      world.turnRight();

        }

         sistema.printOutput("FACE con valor "+o);
    }

   public static void casePick(ArrayList<Object> out, Map<String, Object> map) throws Exception{
     Integer n;
     String x;
     n = checkN((String) out.get(1), map);
     ArrayList<Object> adds = (ArrayList<Object>) out.get(2);
     x = (String) adds.get(1);
     //TODO

         sistema.printOutput("PICK con valores: " + n + " y " + x);
    }

   public static void casePut(ArrayList<Object> out, Map<String, Object> map) throws Exception{
     Integer n;
     String x;
     n = checkN((String) out.get(1), map);
     ArrayList<Object> adds = (ArrayList<Object>) out.get(2);
     x = (String) adds.get(1);
     try {
       if (x.equals("#balloons")) {
         world.putBalloons(n);
       }else if (x.equals("#chips")) {
         world.putChips(n);
       }
     }catch (Exception e) {
       throw new IllegalArgumentException("No se puede poner " + x + " en la posici\u00f3n " + n + ".");
     }
     sistema.printOutput("PUT con valores: " + n + " y " + x);
    }

    public static void caseJump(ArrayList<Object> out, Map<String, Object> map) throws Exception{
      Integer n;
      String operation;
      String value;
      n = checkN((String) out.get(1), map);
      ArrayList<Object> adds = (ArrayList<Object>) out.get(2);
      for (Object add : adds) {
        if((String)add == "toThe") {
            operation = (String) add;
            value = (String) adds.get(1);
            //TODO
            sistema.printOutput("JUMP con valores: " + n + " y " + value + " y " + operation);
        }else if((String)add == "inDir") {
            operation = (String) add;
            value = (String) adds.get(1);
            //TODO
            sistema.printOutput("JUMP con valores: " + n + " y " + value + " y " + operation);
        }
      }
      //sistema.printOutput("JUMP con valor "+n);
    }

    public static void caseNop() {
      sistema.printOutput("NOP");
    }

    public static void caseLoop(ArrayList<Object> out, Map<String, Object> map) throws Exception{
      Boolean conditionVal =true;
      ArrayList<Object> condition = (ArrayList<Object>) out.get(1);
      sistema.printOutput("LOOP con valor "+condition);
      //System.out.println("LOOP con valor "+condition);

      while(true) {
        conditionVal = checkCondition(condition, map);
        if(!conditionVal) {
          break;
        }
        Map<Integer, ArrayList<Object>> instructions = (Map<Integer, ArrayList<Object>>) out.get(2);

        readInstructions(instructions, map);
      }
    }

    public static void caseConditional(ArrayList<Object> out, Map<String, Object> map) throws Exception{

      Boolean conditionVal = checkCondition((ArrayList<Object>)out.get(1), map);

          sistema.printOutput("CONDITIONAL");
      //System.out.println("CONDITIONAL");
      if (conditionVal) {
          Map<Integer, ArrayList<Object>> instructions = (Map<Integer, ArrayList<Object>>) out.get(2);
          readInstructions(instructions, map);
      }else {
          Map<Integer, ArrayList<Object>> instructions = (Map<Integer, ArrayList<Object>>) out.get(3);
          readInstructions(instructions, map);
      }
    }

    public static Boolean checkCondition(ArrayList<Object> condition, Map<String, Object> map) throws Exception{
                String type = (String) condition.get(0);
                Boolean out = false;
      if (type.equals(FACING_C)) {
        //TODO
        sistema.printOutput("FACING_C");
          return out;
      }else if (type.equals(CAN_PUT)) {
        //TODO
        sistema.printOutput("CAN_PUT");
          return out;
      }else if (type.equals(CAN_PICK)) {
        //TODO
        sistema.printOutput("CAN_PICK");
          return out;
      }else if (type.equals(CAN_MOVE)) {
        //TODO
        sistema.printOutput("CAN_MOVE");
          return out;
      }else if (type.equals(CAN_JUMP)) {
        //TODO
        sistema.printOutput("CAN_JUMP");
          return out;
      }else if (type.equals(NOT_)) {
        sistema.printOutput("NOT_");
          return !checkCondition((ArrayList<Object>)condition.get(1), map);
      }else {
          return false;
      }
    }

    public static void caseRepeat(ArrayList<Object> out, Map<String, Object> map) throws Exception{
                Integer n = checkN((String) out.get(1), map);
                sistema.printOutput("REPEAT con valor "+n);
                //System.out.println("REPEAT con valor "+n);
                Map<Integer, ArrayList<Object>> instructions = (Map<Integer, ArrayList<Object>>) out.get(2);
                while(true) {
                  if(n == 0) {
            break;
          }else {
            readInstructions(instructions, map);
            n--;
          }
                }
    }

    public static void caseProcedureDef(ArrayList<Object> out, Map<String, Object> map) throws Exception{
                //Falta chekear que el procedimiento no se repita
                Map<String, Object> util = (Map<String, Object>) out.get(1);
                String name = String.join("", (ArrayList<String>)util.get("name"));
                Map<Integer, ArrayList<Object>> block = (Map<Integer, ArrayList<Object>>)util.get("block");
                ArrayList<String > params = (ArrayList<String>)util.get("params");

                Map<String, Object> proc = new HashMap<>();
                proc.put("name", name);
                proc.put("block", block);
                proc.put("params", params);
                procs.put(name, proc);

                sistema.printOutput("PROCEDURE DEF con nombre: " + name + " y parametros: " + params);
                sistema.printOutput("PROCEDURE DEF con block: " + block);
                //System.out.println("PROCEDURE DEF con nombre: " + name + " y parametros: " + params);
                //System.out.println("PROCEDURE DEF con block: " + block);


    }

    public static void caseProcedureCall(ArrayList<Object> out, Map<String, Object> map) throws Exception{

      Map<String, Object> util = (Map<String, Object>) out.get(1);
      String name = String.join("", (ArrayList<String>)util.get("name"));
      ArrayList<String> params = (ArrayList<String>)util.get("params");
      if (!procs.containsKey(name)) {
          throw new IllegalArgumentException("El procedimiento '" + name + "' no existe.");
      }
      Map<String, Object> proc = (Map<String,Object >)procs.get(name);
      Map<Integer, ArrayList<Object>> block = (Map<Integer, ArrayList<Object>>)proc.get("block");
      ArrayList<String> procParams = (ArrayList<String>)proc.get("params");
          Map<String, Object> localVars = new HashMap<>();
      try {
        for (int i = 0; i < params.size(); i++) {
          localVars.put(procParams.get(i), checkN(params.get(i), map));
        } }catch (Exception e) {
          throw new IllegalArgumentException("El procedimiento '" + name + "' no tiene los parametros correctos.");
        }
      sistema.printOutput("PROCEDURE CALL con nombre: " + name + " y parametros: " + localVars);
      //System.out.println("PROCEDURE CALL con nombre: " + name + " y parametros: " + localVars);

      readInstructions(block, localVars);


    }

    public static void readInstructions(Map<Integer,ArrayList<Object >> instructions, Map<String, Object> map) throws Exception {
      for (Map.Entry<Integer, ArrayList<Object>> entry : instructions.entrySet()) {
          ArrayList<Object> instruction = entry.getValue();
          String type = (String) instruction.get(0);
          sistema.printOutput("Instrucci\u00f3n: " + type);
          //System.out.println("Instrucción: " + type);
          if (type.equals(CREATE_VARS)) {
              createVars((ArrayList<String>) instruction.get(1), map);
          } else if (type.equals(ASSIGN_VAR)) {
              assignVar((String) instruction.get(1), (String) instruction.get(2), map);
          }else if (type.equals(GO_TO)) {
              caseGoTo((String) instruction.get(1), (String) instruction.get(2), map);
          }else if (type.equals(MOVE_I)) {
              caseMove((ArrayList<Object>)instruction, map);
          }else if (type.equals(TURN_I)) {
              caseTurn((String) instruction.get(1), map);
          }else if (type.equals(FACE_I)) {
              caseFace((String) instruction.get(1), map);
          }else if (type.equals(PICK_I)) {
              casePick((ArrayList<Object>)instruction, map);
          }else if (type.equals(PUT_I)) {
              casePut((ArrayList<Object>)instruction, map);
          }else if (type.equals(JUMP_I)) {
              caseJump((ArrayList<Object>)instruction, map);
          }else if (type.equals(NOP_I)) {
              caseNop();
          }else if (type.equals(LOOP_C)) {
              caseLoop(instruction, map);
          }else if (type.equals(CONDITIONAL_C)) {
              caseConditional(instruction, map);
          }else if (type.equals(REPEAT_C)) {
              caseRepeat(instruction, map);
          }else if (type.equals(PROCEDURE_DEF)) {
              caseProcedureDef(instruction, map);
          }else if (type.equals(PROCEDURE_CALL)) {
              caseProcedureCall(instruction, map);
          }
      }
    }

  final public Boolean command(Console sistema) throws ParseException, Exception {createSistema(sistema);
  //salida = new String();

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROC:
    case PIPE:
    case LSQUARE:
    case WORD:{
      label_1:
      while (true) {
Map<Integer,ArrayList<Object >> instructions = new LinkedHashMap<>();
      ArrayList<Object> instruction = new ArrayList<>();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PIPE:{
ArrayList<String> vars;
          vars = variable_definition();
instruction.add(CREATE_VARS);
          instruction.add(vars);
          instructions.put(getInstructionID(), instruction);
          try { readInstructions(instructions, globalVars); {if ("" != null) return true;}} catch (Exception e) {{if ("" != null) return false;}}
          break;
          }
        case WORD:{
Token t; Boolean colon = false;
          t = jj_consume_token(WORD);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ASSIGN:{
ArrayList<Object> out;
            out = variable_assignment(t);
instruction.add(ASSIGN_VAR);
                      instruction.addAll(out);
                      instructions.put(getInstructionID(), instruction);
                      try { readInstructions(instructions, globalVars);} catch (Exception e) {{if ("" != null) return false;}}
            break;
            }
          case DOT:
          case COLON:
          case WORD:{
Map<String, Object > out;
            out = procedure_call(t);
instruction.add(PROCEDURE_CALL);
                      instruction.add(out);
                      instructions.put(getInstructionID(), instruction);
                      try { readInstructions(instructions, globalVars);} catch (Exception e) {{if ("" != null) return false;}}
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case PROC:{
Map<String, Object > out;
          out = procedure_definition();
instruction.add(PROCEDURE_DEF);
            instruction.add(out);
            instructions.put(getInstructionID(), instruction);
            try { readInstructions(instructions, globalVars);} catch (Exception e) {{if ("" != null) return false;}}
          break;
          }
        case LSQUARE:{
Map<Integer, ArrayList<Object>> out;
          out = block();
Integer id = createBlock(out);
            try { executeBlock(id);} catch (Exception e) {{if ("" != null) return false;}}
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
//sistema.printOutput(salida);
          {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PROC:
        case PIPE:
        case LSQUARE:
        case WORD:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public ArrayList<String> variable_definition() throws ParseException {ArrayList<String> vars = new ArrayList<String>();
  Token t;
    jj_consume_token(PIPE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WORD:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(WORD);
vars.add(t.image);
    }
    jj_consume_token(PIPE);
{if ("" != null) return vars;}
    throw new Error("Missing return statement in function");
}

  final public Map<String, Object> procedure_definition() throws ParseException {Token t;
  Token v;
  ArrayList<String> name = new ArrayList<String>();
  ArrayList<String> params = new ArrayList<String>();
  Map<Integer, ArrayList<Object>> block;
  Map<String, Object> out = new HashMap<>();
    jj_consume_token(PROC);
    t = jj_consume_token(WORD);
name.add(t.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      v = jj_consume_token(WORD);
params.add(v.image);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WORD:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      // Luego, mientras se observe que hay otro par (señalado por un WORD seguido de COLON)
                     //LOOKAHEAD( <WORD> <COLON> )
                     t = jj_consume_token(WORD);
      jj_consume_token(COLON);
      v = jj_consume_token(WORD);
name.add(t.image); params.add(v.image);
    }
    block = block();
out.put("name", name);
    out.put("params", params);
    out.put("block", block);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

//Map<String, Integer> localVars, ArrayList<Map<String, Object >> instructions
  final public Map<Integer, ArrayList<Object>> block() throws ParseException {Map<Integer, ArrayList<Object>> instructions = new LinkedHashMap<>();
  //ArrayList<Object> instruction = new ArrayList<>();

    jj_consume_token(LSQUARE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GOTO:
      case MOVE:
      case TURN:
      case PICK:
      case FACE:
      case PUT:
      case JUMP:
      case NOP:
      case IF:
      case WHILE:
      case FOR:
      case PIPE:
      case WORD:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PIPE:{
ArrayList<String> vars;
        vars = variable_definition();
ArrayList<Object> instruction = new ArrayList<>();
                instruction.add(CREATE_VARS);
                instruction.add(vars);
                instructions.put(getInstructionID(), instruction);
        break;
        }
      case WORD:{
Token t;
        t = jj_consume_token(WORD);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
ArrayList<Object> assign;
          assign = variable_assignment(t);
ArrayList<Object> instruction = new ArrayList<>();
                instruction.add(ASSIGN_VAR);
                instruction.addAll(assign);
                instructions.put(getInstructionID(), instruction);
          break;
          }
        case DOT:
        case COLON:
        case WORD:{
Map<String, Object > out;
          out = procedure_call(t);
ArrayList<Object> instruction = new ArrayList<>();
            instruction.add(PROCEDURE_DEF);
            instruction.add(out);
            instructions.put(getInstructionID(), instruction);
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case FOR:{
ArrayList<Object> out;
        out = repeat();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(REPEAT_C);
          instruction.addAll(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case IF:{
ArrayList<Object> out;
        out = conditional();
ArrayList<Object> instruction = new ArrayList<>();
              instruction.add(CONDITIONAL_C);
          instruction.addAll(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case WHILE:{
ArrayList<Object> out;
        out = loop();
ArrayList<Object> instruction = new ArrayList<>();
              instruction.add(LOOP_C);
          instruction.addAll(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case GOTO:{
ArrayList<Object> outGoTo;
        outGoTo = goTo();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(GO_TO);
          instruction.addAll(outGoTo);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case MOVE:{
ArrayList<Object>out;
        out = move();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(MOVE_I);
          instruction.addAll(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case TURN:{
String out;
        out = turn();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(TURN_I);
          instruction.add(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case FACE:{
String out;
        out = face();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(FACE_I);
          instruction.add(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case PICK:{
ArrayList<Object> out;
        out = pick();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(PICK_I);
          instruction.addAll(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case PUT:{
ArrayList<Object> out;
        out = put();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(PUT_I);
          instruction.addAll(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case JUMP:{
ArrayList<Object> out;
        out = jump();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(JUMP_I);
          instruction.addAll(out);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      case NOP:{
        nop();
ArrayList<Object> instruction = new ArrayList<>();
          instruction.add(NOP_I);
          instructions.put(getInstructionID(), instruction);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RSQUARE);
{if ("" != null) return instructions;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> variable_assignment(Token var) throws ParseException {ArrayList<Object> out = new ArrayList<Object>();
//  Token var;
  Token value;
    jj_consume_token(ASSIGN);
    value = N();
    jj_consume_token(DOT);
out.add(var.image);
    out.add(value.image);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> goTo() throws ParseException {Token n1;
  Token n2;
    jj_consume_token(GOTO);
    jj_consume_token(COLON);
    n1 = N();
    jj_consume_token(WITH);
    jj_consume_token(COLON);
    n2 = N();
    jj_consume_token(DOT);
ArrayList<Object> out = new ArrayList<Object>();
    out.add(n1.image);
    out.add(n2.image);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public Token N() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      t = jj_consume_token(NUM);
      break;
      }
    case WORD:{
      t = jj_consume_token(WORD);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public String D_turn() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 48:{
      t = jj_consume_token(48);
      break;
      }
    case 49:{
      t = jj_consume_token(49);
      break;
      }
    case 50:{
      t = jj_consume_token(50);
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String D() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 51:{
      t = jj_consume_token(51);
      break;
      }
    case 48:{
      t = jj_consume_token(48);
      break;
      }
    case 49:{
      t = jj_consume_token(49);
      break;
      }
    case 52:{
      t = jj_consume_token(52);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String O() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 53:{
      t = jj_consume_token(53);
      break;
      }
    case 54:{
      t = jj_consume_token(54);
      break;
      }
    case 55:{
      t = jj_consume_token(55);
      break;
      }
    case 56:{
      t = jj_consume_token(56);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String X() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 57:{
      t = jj_consume_token(57);
      break;
      }
    case 58:{
      t = jj_consume_token(58);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public void variable() throws ParseException {
    jj_consume_token(VARNAME);
}

  final public ArrayList<Object > toThe() throws ParseException {Token t;
  String d;
    t = jj_consume_token(TOTHE);
    jj_consume_token(COLON);
    d = D();
ArrayList<Object> out = new ArrayList<Object>();
    out.add(t.image);
    out.add(d);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> inDir() throws ParseException {Token t;
  String o;
    t = jj_consume_token(INDIR);
    jj_consume_token(COLON);
    o = O();
ArrayList<Object> out = new ArrayList<Object>();
    out.add(t.image);
    out.add(o);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> ofType() throws ParseException {Token t;
  String x;
    t = jj_consume_token(OFTYPE);
    jj_consume_token(COLON);
    x = X();
ArrayList<Object> out = new ArrayList<Object>();
    out.add(t.image);
    out.add(x);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> move() throws ParseException {Token n;
  ArrayList<Object> out = new ArrayList<Object>();
    jj_consume_token(MOVE);
    jj_consume_token(COLON);
    n = N();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOTHE:
    case INDIR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INDIR:{
        out = inDir();
        break;
        }
      case TOTHE:{
        out = toThe();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(DOT);
ArrayList<Object> out2 = new ArrayList<>();
    out2.add(n.image);
    out2.add(out);
    {if ("" != null) return out2;}
    throw new Error("Missing return statement in function");
}

  final public String turn() throws ParseException {String d;
    jj_consume_token(TURN);
    jj_consume_token(COLON);
    d = D_turn();
    jj_consume_token(DOT);
{if ("" != null) return d;}
    throw new Error("Missing return statement in function");
}

  final public String face() throws ParseException {String o;
    jj_consume_token(FACE);
    jj_consume_token(COLON);
    o = O();
    jj_consume_token(DOT);
{if ("" != null) return o;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> put() throws ParseException {Token n;
  ArrayList<Object> of = new ArrayList<Object>();
    jj_consume_token(PUT);
    jj_consume_token(COLON);
    n = N();
    of = ofType();
    jj_consume_token(DOT);
ArrayList<Object> out = new ArrayList<Object>();
    out.add(n.image);
    out.add(of);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> pick() throws ParseException {Token n;
  ArrayList<Object> of = new ArrayList<Object>();
    jj_consume_token(PICK);
    jj_consume_token(COLON);
    n = N();
    of = ofType();
    jj_consume_token(DOT);
ArrayList<Object> out = new ArrayList<Object>();
    out.add(n.image);
    out.add(of);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> jump() throws ParseException {Token n;
  ArrayList<Object> out = new ArrayList<Object>();
    jj_consume_token(JUMP);
    jj_consume_token(COLON);
    n = N();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INDIR:{
      out = inDir();
      break;
      }
    case TOTHE:{
      out = toThe();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
ArrayList<Object> out2 = new ArrayList<>();
    out2.add(n.image);
    out2.add(out);
    {if ("" != null) return out2;}
    throw new Error("Missing return statement in function");
}

  final public void nop() throws ParseException {
    jj_consume_token(NOP);
    jj_consume_token(DOT);
}

  final public ArrayList<Object> conditional() throws ParseException {ArrayList<Object> condition;
  Map<Integer, ArrayList<Object>> block1;
  Map<Integer, ArrayList<Object>> block2;
    jj_consume_token(IF);
    jj_consume_token(COLON);
    condition = condition();
    jj_consume_token(THEN);
    jj_consume_token(COLON);
    block1 = block();
    jj_consume_token(ELSE);
    jj_consume_token(COLON);
    block2 = block();
ArrayList<Object> out = new ArrayList<Object>();
    out.add(condition);
    out.add(block1);
    out.add(block2);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> loop() throws ParseException {ArrayList<Object> instruction_ff = new ArrayList<Object>();
  ArrayList<Object> condition;
  Map<Integer, ArrayList<Object>> instructions;
    jj_consume_token(WHILE);
    jj_consume_token(COLON);
    condition = condition();
    jj_consume_token(DO);
    jj_consume_token(COLON);
    instructions = block();
instruction_ff.add(condition);
    instruction_ff.add(instructions);
    {if ("" != null) return instruction_ff;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> repeat() throws ParseException {ArrayList<Object> out = new ArrayList<Object>();
  Token n;
  Map<Integer, ArrayList<Object>> block;
    jj_consume_token(FOR);
    jj_consume_token(COLON);
    n = N();
    jj_consume_token(REPEAT);
    jj_consume_token(COLON);
    block = block();
out.add(n.image);
    out.add(block);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> condition() throws ParseException {ArrayList<Object> out2 = new ArrayList<Object>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FACING:{
String out;
      out = facing();
out2.add(FACING_C);
    out2.add(out);
      break;
      }
    case CANPUT:{
ArrayList<Object> out;
      out = canPut();
out2.add(CAN_PUT);
    out2.addAll(out);
      break;
      }
    case CANPICK:{
ArrayList<Object> out;
      out = canPick();
out2.add(CAN_PICK);
    out2.addAll(out);
      break;
      }
    case CANMOVE:{
ArrayList<Object> out;
      out = canMove();
out2.add(CAN_MOVE);
    out2.addAll(out);
      break;
      }
    case CANJUMP:{
ArrayList<Object> out;
      out = canJump();
out2.add(CAN_JUMP);
    out2.addAll(out);
      break;
      }
    case NOT:{
ArrayList<Object> out;
      out = not();
out2.add(NOT_);
    out2.addAll(out);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return out2;}
    throw new Error("Missing return statement in function");
}

  final public String facing() throws ParseException {String o;
    jj_consume_token(FACING);
    jj_consume_token(COLON);
    o = O();
    jj_consume_token(DOT);
{if ("" != null) return o;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> canPut() throws ParseException {Token n;
  ArrayList<Object> of = new ArrayList<Object>();
    jj_consume_token(CANPUT);
    jj_consume_token(COLON);
    n = N();
    of = ofType();
    jj_consume_token(DOT);
ArrayList<Object> out = new ArrayList<Object>();
    out.add(n.image);
    out.add(of);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> canPick() throws ParseException {Token n;
  ArrayList<Object> of = new ArrayList<Object>();
    jj_consume_token(CANPICK);
    jj_consume_token(COLON);
    n = N();
    of = ofType();
    jj_consume_token(DOT);
ArrayList<Object> out = new ArrayList<Object>();
    out.add(n.image);
    out.add(of);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> canMove() throws ParseException {Token n;
  ArrayList<Object> out = new ArrayList<Object>();
    jj_consume_token(CANMOVE);
    jj_consume_token(COLON);
    n = N();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INDIR:{
      out = inDir();
      break;
      }
    case TOTHE:{
      out = toThe();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
ArrayList<Object> out2 = new ArrayList<Object>();
    out2.add(n.image);
    out2.add(out);
    {if ("" != null) return out2;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> canJump() throws ParseException {Token n;
  ArrayList<Object> out = new ArrayList<Object>();
    jj_consume_token(CANJUMP);
    jj_consume_token(COLON);
    n = N();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INDIR:{
      out = inDir();
      break;
      }
    case TOTHE:{
      out = toThe();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(DOT);
ArrayList<Object> out2 = new ArrayList<Object>();
    out2.add(n.image);
    out2.add(out);
    {if ("" != null) return out2;}
    throw new Error("Missing return statement in function");
}

  final public ArrayList<Object> not() throws ParseException {ArrayList<Object> out = new ArrayList<Object>();
    jj_consume_token(NOT);
    jj_consume_token(COLON);
    out = condition();
{if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  final public Map<String,Object> procedure_call(Token t2) throws ParseException {ArrayList<Object> name = new ArrayList<Object>();
  ArrayList<String> params = new ArrayList<String>();
  Map<String, Object> out = new HashMap<>();
  Token t;
  Token n;
name.add(t2.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      n = N();
params.add(n.image);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    label_5:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_5;
      }
      t = jj_consume_token(WORD);
      jj_consume_token(COLON);
      n = N();
name.add(t.image); params.add(n.image);
    }
    jj_consume_token(DOT);
out.put("name", name);
    out.put("params", params);
    {if ("" != null) return out;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(WORD)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x20,0x20,0x21,0x0,0x0,0x0,0xa7f840,0x0,0xa7f840,0x0,0x0,0x0,0x0,0x0,0x300,0x300,0x300,0x7e000000,0x300,0x300,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x2460,0x200a,0x200a,0x200a,0x2000,0x400,0x2000,0x2002,0x2460,0x2002,0x3000,0x70000,0x1b0000,0x1e00000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x400,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 22; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 22; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
